#include <iostream>
#include <vector>
#include <string>
#include <sstream>

using namespace std;

// Function to split a string by a delimiter and convert to vector of integers
vector<int> splitToInt(const string& str, char delimiter) {
    vector<int> tokens;
    string token;
    stringstream ss(str);
    while (getline(ss, token, delimiter)) {
        tokens.push_back(stoi(token));
    }
    return tokens;
}

// Recursive function to count valid arrangements
void countArrangements(const string& row, const vector<int>& groups, int groupIndex, int pos, int& count) {
    if (groupIndex == groups.size()) {
        count++;
        return;
    }

    int groupSize = groups[groupIndex];
    for (int i = pos; i <= row.size() - groupSize; ++i) {
        // Check if we can place the group at position i
        bool canPlace = true;
        for (int j = 0; j < groupSize; ++j) {
            if (row[i + j] != '?' && row[i + j] != '#') {
                canPlace = false;
                break;
            }
        }
        if (canPlace) {
            // Place the group and recurse
            string nextRow = row;
            for (int j = 0; j < groupSize; ++j) {
                nextRow[i + j] = '#';
            }
            // Ensure there's at least one operational spring between groups
            if (i + groupSize < row.size() && (row[i + groupSize] == '.' || row[i + groupSize] == '?')) {
                nextRow[i + groupSize] = '.';
            }
            countArrangements(nextRow, groups, groupIndex + 1, i + groupSize + 1, count);
        }
    }
}

// Function to calculate the number of valid arrangements for a row
int calculateArrangements(const string& row, const vector<int>& groups) {
    int count = 0;
    countArrangements(row, groups, 0, 0, count);
    return count;
}

int main() {
    // Example input
    vector<pair<string, string>> input = {
        {"???.###", "1,1,3"},
        {".??..??...?##.", "1,1,3"},
        {"?#?#?#?#?#?#?#?", "1,3,1,6"},
        {"????.#...#...", "4,1,1"},
        {"????.######..#####.", "1,6,5"},
        {"?###????????", "3,2,1"}
    };

    int totalArrangements = 0;

    for (int i = 0; i < input.size(); i++) {
        string row = input[i].first;
        vector<int> groups = splitToInt(input[i].second, ',');

        int arrangements = calculateArrangements(row, groups);
        cout << "Row: " << row << " Groups: " << input[i].second << " Arrangements: " << arrangements << endl;

        totalArrangements += arrangements;
    }

    cout << "Total arrangements: " << totalArrangements << endl;

    return 0;
}
